syntax = "v1"

type (
	UploadFileReq {
		FileName    string `json:"file_name"`
		FileSize    int64  `json:"file_size"`
		FileHash    string `json:"file_hash"`
		TotalChunks int    `json:"total_chunks"`
		ChunkHash   string `json:"chunk_hash"`
		ChunkNum    int    `json:"chunk_num"`
	}
	UploadFileResp {
		StatusMsg    string `json:"status_msg"`
		FileSuccess  bool   `json:"file_success"`
		ChunkSuccess bool   `json:"chunk_success"`
		ChunksCount  int    `json:"chunks_count"`
		FileID       int64  `json:"file_id"`
		FileURL      string `json:"file_url"`
	}
	CheckFileExistReq {
		Hash string `path:"hash"`
	}
	CheckFileExistResp {
		Exist      bool     `json:"exist"`
		FileID     int64    `json:"file_id"`
		FileURL    string   `json:"file_url"`
		ChunksHash []string `json:"chunks_hash"`
	}
	GetFileListResp {
		FileID   int64  `json:"file_id"`
		FileName string `json:"file_name"`
		FileSize int64  `json:"file_size"`
		FileURL  string `json:"file_url"`
	}
)

@server (
	jwt: Auth
)
service repository-api {
	@doc(
		summary: "Upload File",
	)
	@handler UploadFile
	post /file/upload(UploadFileReq) returns(UploadFileResp)

	@doc(
		summary: "Check File Exist",
	)
	@handler CheckFileExist
	get /file/exist/:hash(CheckFileExistReq) returns(CheckFileExistResp)

	@doc(
		summary: "Get File List",
	)
	@handler GetFileList
	get /file/list returns([]GetFileListResp)

}