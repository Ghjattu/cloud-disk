syntax = "v1"

type (
	UploadFileReq {
		FileHash  string `json:"file_hash"`
		ChunkHash string `json:"chunk_hash"`
		ChunkNum  int    `json:"chunk_num"`
	}
	UploadFileResp {
		ChunkSuccess bool `json:"chunk_success"`
	}

	MergeChunksReq {
		FileHash string `json:"file_hash"`
		FileName string `json:"file_name"`
		FileSize int64  `json:"file_size"`
	}
	MergeChunksResp {
		FileID     int64  `json:"file_id"`
		FileURL    string `json:"file_url"`
		UploadTime int64  `json:"upload_time"` // seconds
	}

	CheckFileExistReq {
		Hash string `path:"hash"`
	}
	CheckFileExistResp {
		Exist      bool     `json:"exist"`
		FileID     int64    `json:"file_id"`
		FileURL    string   `json:"file_url"`
		ChunksHash []string `json:"chunks_hash"`
	}

	GetFileListResp {
		FileID     int64  `json:"file_id"`
		FileName   string `json:"file_name"`
		FileSize   int64  `json:"file_size"`
		FileURL    string `json:"file_url"`
		UploadTime int64  `json:"upload_time"` // seconds
	}
)

@server (
	jwt: Auth
)
service repository-api {
	@doc(
		summary: "Upload File",
	)
	@handler UploadFile
	post /file/upload(UploadFileReq) returns(UploadFileResp)

	@doc(
		summary: "Merge Chunks",
	)
	@handler MergeChunks
	post /file/merge(MergeChunksReq) returns(MergeChunksResp)

	@doc(
		summary: "Check File Exist",
	)
	@handler CheckFileExist
	get /file/exist/:hash(CheckFileExistReq) returns(CheckFileExistResp)

	@doc(
		summary: "Get File List",
	)
	@handler GetFileList
	get /file/list returns([]GetFileListResp)

}